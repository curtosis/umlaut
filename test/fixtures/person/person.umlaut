@deprecation "This is a comment over an interface"
@doc "This is a comment over an interface"
@lang/dot color lightyellow
interface Person {
  name: String {
    @doc "You can also document fields inside the interface"
  }
}

//@lang/lacinia resolver resolve-name
@lang/dot color navajowhite
type Employee : Person {
  salary: Float
  salaryDate: DateTime
  status: RelationshipStatus
  profession: Profession?
  changeSalary(newSalary: Float): Float
  {
    @doc "Changes the salary of an employee"
  }
  friends: String[0..4]
  address: String
  {
      @lang/lacinia resolver resolve-name
      @lang/graphql resolver resolve-name2
      @doc "This is a comment"
      @deprecation "This was deprecated"
  }
}

@lang/dot color lightblue
@deprecation "This enum is also deprecated"
@doc "This is a comment above an enum"
enum RelationshipStatus {
  Single
  Married
}

@lang/lacinia identifier query
@doc "An employee inherits from Person"
type QueryRoot {
  unionQuery(): UnionType
  getFriends(): Person[0..n] {
    @doc "This is a documentation inside a query field (with parenthesis in the comment)"
  }
}

@lang/lacinia identifier mutation
@doc "This is a comment above a mutation ([]{-})"
@lang/dot color aquamarine
type MutationRoot {
  mutation: String {
    @doc "Test comment with special characters: (with [with {with ()}]){}[]...+-*/\^%&$#@!?"
  }
}

@lang/lacinia identifier subscription
type SubscriptionRoot {
    getMessages(roomId: String): String[0..n] {
      @lang/lacinia stream stream-messages
    }
    getLogs: String[0..n] {
      @lang/lacinia stream stream-logs
    }
}

@lang/lacinia identifier union
@lang/graphql identifier union
@doc "This is an union type"
enum UnionType {
  Person
  Profession
}

diagram fixture {
  (QueryRoot)!
}
